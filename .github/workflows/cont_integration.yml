on: [push, pull_request]

name: CI

jobs:
  build-test:
    name: Build and test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - version: 1.60.0 # STABLE
            clippy: true
            coverage: true
          - version: 1.56.1 # MSRV
        features:
          - default
          - minimal
          - all-keys
          - minimal,use-esplora-ureq
          - key-value-db
          - electrum
          - compact_filters
          - esplora,ureq,key-value-db,electrum
          - compiler
          - rpc
          - verify
          - async-interface
          - use-esplora-reqwest
          - sqlite
          - sqlite-bundled
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Generate cache key
        run: echo "${{ matrix.rust.version }} ${{ matrix.features }}" | tee .cache_key
      - name: cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('.cache_key') }}-${{ hashFiles('**/Cargo.toml','**/Cargo.lock') }}
      - name: Set default toolchain
        run: rustup default ${{ matrix.rust.version }}
      - name: Set profile
        run: rustup set profile minimal
      - name: Add clippy
        if: ${{ matrix.rust.clippy }}
        run: rustup component add clippy
      - name: Update toolchain
        run: rustup update
      - name: Install grcov
        if: ${{ matrix.rust.coverage }}
        run: if [[ ! -e ~/.cargo/bin/grcov ]]; then cargo install grcov; fi
      - name: Build
        run: cargo build --features ${{ matrix.features }} --no-default-features
      - name: Clippy
        if: ${{ matrix.rust.clippy }}
        run: cargo clippy --all-targets --features ${{ matrix.features }} --no-default-features -- -D warnings
      - name: Run test with cargo flags
        if: ${{ matrix.rust.coverage }}
        env:
          RUSTFLAGS: "-Cinstrument-coverage"
          RUSTDOCFLAGS: "-Cinstrument-coverage"
          LLVM_PROFILE_FILE: "report-%p-%m.profraw"
        run: cargo test --features ${{ matrix.features }} --no-default-features
      - name: Test
        if: ${{! matrix.rust.coverage }}
        run: cargo test --features ${{ matrix.features }} --no-default-features
      - name: Run grcov
        if: ${{ matrix.rust.coverage }}
        run: mkdir coverage; grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore '../**' -o ./coverage/lcov-${{ hashFiles('.cache_key') }}.info
      - name: Upload artifact
        if: ${{ matrix.rust.coverage }}
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report-${{ hashFiles('.cache_key') }}
          path: ./coverage/lcov-${{ hashFiles('.cache_key') }}.info

  test-readme-examples:
    name: Test README.md examples
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-md-docs-${{ hashFiles('**/Cargo.toml','**/Cargo.lock') }}
      - name: Set default toolchain
        run: rustup default nightly
      - name: Set profile
        run: rustup set profile minimal
      - name: Update toolchain
        run: rustup update
      - name: Test
        run: cargo test --features test-md-docs --no-default-features -- doctest::ReadmeDoctests

  test-blockchains:
    name: Blockchain ${{ matrix.blockchain.features }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        blockchain:
          - name: electrum
            testprefix: blockchain::electrum::test
            features: test-electrum,verify
          - name: rpc
            testprefix: blockchain::rpc::test
            features: test-rpc
          - name: rpc-legacy
            testprefix: blockchain::rpc::test
            features: test-rpc-legacy
          - name: esplora
            testprefix: esplora
            features: test-esplora,use-esplora-reqwest,verify
          - name: esplora
            testprefix: esplora
            features: test-esplora,use-esplora-ureq,verify
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ github.job }}-${{ hashFiles('**/Cargo.toml','**/Cargo.lock') }}
      - name: Setup rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Test
        run: cargo test --no-default-features --features ${{ matrix.blockchain.features }} ${{ matrix.blockchain.testprefix }}::bdk_blockchain_tests

  check-wasm:
    name: Check WASM
    runs-on: ubuntu-20.04
    env:
      CC: clang-10
      CFLAGS: -I/usr/include
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ github.job }}-${{ hashFiles('**/Cargo.toml','**/Cargo.lock') }}
        # Install a recent version of clang that supports wasm32
      - run: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - || exit 1
      - run: sudo apt-add-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-10 main" || exit 1
      - run: sudo apt-get update || exit 1
      - run: sudo apt-get install -y libclang-common-10-dev clang-10 libc6-dev-i386 || exit 1
      - name: Set default toolchain
        run: rustup default 1.56.1 # STABLE
      - name: Set profile
        run: rustup set profile minimal
      - name: Add target wasm32
        run: rustup target add wasm32-unknown-unknown
      - name: Update toolchain
        run: rustup update
      - name: Check
        run: cargo check --target wasm32-unknown-unknown --features use-esplora-reqwest --no-default-features

  fmt:
    name: Rust fmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set default toolchain
        run: rustup default nightly
      - name: Set profile
        run: rustup set profile minimal
      - name: Add rustfmt
        run: rustup component add rustfmt
      - name: Update toolchain
        run: rustup update
      - name: Check fmt
        run: cargo fmt --all -- --config format_code_in_doc_comments=true --check

  coverage:
    name: Upload Coverage Reports
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./coverage/
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: ./coverage/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage/*
